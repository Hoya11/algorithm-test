// 최대공약수와 최소공배수
// 문제 설명
// 두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환하는 함수, 
// solution을 완성해 보세요.
// 배열의 맨 앞에 최대공약수, 그다음 최소공배수를 넣어 반환하면 됩니다.
// 예를 들어 두 수 3, 12의 최대공약수는 3, 최소공배수는 12이므로 solution(3, 12)는 [3, 12]를 반환해야 합니다.

// 제한 사항
// 두 수는 1이상 1000000이하의 자연수입니다.


// 입출력 예
// n	m	return
// 3	12	[3, 12]
// 2	5	[1, 10]

// 입출력 예 설명

// 입출력 예 #1
// 위의 설명과 같습니다.

// 입출력 예 #2
// 자연수 2와 5의 최대공약수는 1, 최소공배수는 10이므로 [1, 10]을 리턴해야 합니다.



// 유클리드 호제법이란?

// 두 수의 최대공약수를 구하는 알고리즘이다. 
// 2개의 자연수 A,B 에 대해서 A를 B로 나눈 나머지를 r이라고 한다면 (단, A>B 이다),
// A와 B의 최대공약수는 B와 r의 최대공약수와 같다. 
// 이 성질에 따라 B를 r로 나눈 나머지 r` 을 구하고, 다시 r을 r` 로 나눈 나머지를 구하는 과정을 반복하여
// 나머지가 0이 되었을 때, 나누는 수가 A와 B의 최대 공약수이다. 

// 최대공약수를 유클리드 호제법으로 구함
// 최소공배수는 LCM = A * B / GCD 공식으로 구함


function findGcd(n, m) {
    if (n % m === 0) {
      return m;
    } else {
      return findGcd(m, n % m)
    }
  }

function solution(n, m) {
let answer = [];
// 최대공약수
const gcd = findGcd(n, m);
// 최대공배수 구하기
const lcm = n * m / gcd;
answer.push(gcd);
answer.push(lcm);
return answer;
}

console.log(findGcd(2, 5))
console.log(solution(2, 5))

